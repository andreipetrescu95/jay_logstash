image:
  repository: cloudhero/fluentd_elasticsearch
  tag: v3.0.2
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistrKeySecretName

## If using AWS Elasticsearch, all requests to ES need to be signed regardless of whether
## one is using Cognito or not. By setting this to true, this chart will install a sidecar
## proxy that takes care of signing all requests being sent to the AWS ES Domain.
awsSigningSidecar:
  enabled: false
  resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 500Mi
  # requests:
  #   cpu: 100m
  #   memory: 200Mi
  network:
    port: 8080
    address: localhost
    remoteReadTimeoutSeconds: 15
  image:
    repository: abutaha/aws-es-proxy
    tag: v1.0

# Specify to use specific priorityClass for pods
# ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
# If a Pod cannot be scheduled, the scheduler tries to preempt (evict) lower priority
# Pods to make scheduling of the pending Pod possible.
priorityClassName: ""

# Specify where fluentd can find logs
hostLogDir:
  varLog: /var/log
  dockerContainers: /var/lib/docker/containers
  libSystemdDir: /usr/lib64

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 500Mi
  # requests:
  #   cpu: 100m
  #   memory: 200Mi

elasticsearch:
  auth:
    enabled: false
    user: "yourUser"
    password: "yourPass"
  includeTagKey: true
  setOutputHostEnvVar: true
  # If setOutputHostEnvVar is false this value is ignored
  hosts: ["elasticsearch-client:9200"]
  indexName: "fluentd"
  logstash:
    enabled: true
    prefix: "logstash"
  path: ""
  scheme: "http"
  sslVerify: true
  sslVersion: "TLSv1_2"
  outputType: "elasticsearch"
  typeName: "_doc"
  logLevel: "info"
  reconnectOnError: true
  reloadOnFailure: false
  reloadConnections: false
  requestTimeout: "5s"
  buffer:
    enabled: true
    type: "file"
    path: "/var/log/fluentd-buffers/kubernetes.system.buffer"
    flushMode: "interval"
    retryType: "exponential_backoff"
    flushThreadCount: 2
    flushInterval: "5s"
    retryForever: true
    retryMaxInterval: 30
    chunkLimitSize: "2M"
    queueLimitLength: 8
    overflowAction: "block"

# If you want to change args of fluentd process
# by example you can add -vv to launch with trace log
fluentdArgs: "--no-supervisor -q"

# If you want to add custom environment variables, use the env dict
# You can then reference these in your config file e.g.:
#     user "#{ENV['OUTPUT_USER']}"
env: {}
  # OUTPUT_USER: my_user
  # LIVENESS_THRESHOLD_SECONDS: 300
  # STUCK_THRESHOLD_SECONDS: 900

# If you want to add custom environment variables from secrets, use the secret list
secret: []
# - name: ELASTICSEARCH_PASSWORD
#   secret_name: elasticsearch
#   secret_key: password

rbac:
  create: true

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  annotations: {}

## Specify if a Pod Security Policy for node-exporter must be created
## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
##
podSecurityPolicy:
  enabled: false
  annotations: {}
    ## Specify pod annotations
    ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#apparmor
    ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
    ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#sysctl
    ##
    # seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
    # seccomp.security.alpha.kubernetes.io/defaultProfileName: 'docker/default'
    # apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'

livenessProbe:
  enabled: true
  initialDelaySeconds: 600
  periodSeconds: 60
  kind:
    exec:
      command:
      # Liveness probe is aimed to help in situations where fluentd
      # silently hangs for no apparent reasons until manual restart.
      # The idea of this probe is that if fluentd is not queueing or
      # flushing chunks for 5 minutes, something is not right. If
      # you want to change the fluentd configuration, reducing amount of
      # logs fluentd collects, consider changing the threshold or turning
      # liveness probe off completely.
      - '/bin/sh'
      - '-c'
      - >
        LIVENESS_THRESHOLD_SECONDS=${LIVENESS_THRESHOLD_SECONDS:-300};
        STUCK_THRESHOLD_SECONDS=${STUCK_THRESHOLD_SECONDS:-900};
        if [ ! -e /var/log/fluentd-buffers ];
        then
          exit 1;
        fi;
        touch -d "${STUCK_THRESHOLD_SECONDS} seconds ago" /tmp/marker-stuck;
        if [ -z "$(find /var/log/fluentd-buffers -type d -newer /tmp/marker-stuck -print -quit)" ];
        then
          rm -rf /var/log/fluentd-buffers;
          exit 1;
        fi;
        touch -d "${LIVENESS_THRESHOLD_SECONDS} seconds ago" /tmp/marker-liveness;
        if [ -z "$(find /var/log/fluentd-buffers -type d -newer /tmp/marker-liveness -print -quit)" ];
        then
          exit 1;
        fi;

annotations: {}

podAnnotations: {}
  # prometheus.io/scrape: "true"
  # prometheus.io/port: "24231"

## DaemonSet update strategy
## Ref: https://kubernetes.io/docs/tasks/manage-daemon/update-daemon-set/
updateStrategy:
  type: RollingUpdate

tolerations: []
  # - key: node-role.kubernetes.io/master
  #   operator: Exists
  #   effect: NoSchedule

affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: node-role.kubernetes.io/master
  #         operator: DoesNotExist

nodeSelector: {}

service:
  ports:
    - name: "forward"
      type: ClusterIP
      port: 24224

serviceMonitor:
  ## If true, a ServiceMonitor CRD is created for a prometheus operator
  ## https://github.com/coreos/prometheus-operator
  ##
  enabled: false
  interval: 10s
  path: /metrics
  port: 24231
  labels: {}
  metricRelabelings: []
  relabelings: []
  jobLabel: "app.kubernetes.io/instance"
  type: ClusterIP

serviceMetric:
  ## If true, the metrics service will be created
  ## Alternative to implicit creation through serviceMonitor.enabled
  ##
  enabled: false

prometheusRule:
  ## If true, a PrometheusRule CRD is created for a prometheus operator
  ## https://github.com/coreos/prometheus-operator
  ##
  enabled: false
  prometheusNamespace: monitoring
  labels: {}
  #  role: alert-rules

configMaps:
  useDefaults:
    systemConf: false
    containersInputConf: false
    systemInputConf: false
    forwardInputConf: false
    monitoringConf: false
    outputConf: false

# can be used to add new config or overwrite the default configmaps completely after the configmaps default has been disabled above
extraConfigMaps:
  system.conf: |-
    <source>
      @type forward
      tag applogs
      port 24224
      bind 0.0.0.0
    </source>

    <filter applogs>
      @type parser
      key_name log
      <parse>
        @type multiline_grok
        grok_name_key grok_name
        grok_failure_key grokfailure
        multiline_start_regexp ^[0-9]{4}-[0-9]{2}-[0-9]{2}
        <grok>
            pattern %{SYSLOG5424SD:timestamp2} %{WORD:event}:%{NUMBER:unix_epoch}:%{GREEDYDATA:json_string}
        </grok>
        <grok>
            pattern %{TIMESTAMP_ISO8601:timestamp2}:%{LOGLEVEL:loglevel}:DataAccessLogManager:%{WORD:event}:%{NUMBER:unix_epoch}:%{GREEDYDATA:json_string}
        </grok>
        <grok>
            pattern %{TIMESTAMP_ISO8601:timestamp}:%{LOGLEVEL:loglevel}:%{DATA:role}:%{DATA:event} %{BASE16FLOAT:client_id}:%{USERNAME:user_id} %{GREEDYDATA:pii_lines}
        </grok>
        <grok>
            pattern %{TIMESTAMP_ISO8601:timestamp}:%{LOGLEVEL:loglevel}:%{DATA:role}:%{NUMBER:client_id} %{GREEDYDATA:message} in %{BASE16FLOAT:seconds}
        </grok>
        <grok>
            pattern %{TIMESTAMP_ISO8601:timestamp}:%{LOGLEVEL:loglevel}:%{DATA:role}:%{GREEDYDATA:message}: took %{BASE16FLOAT}
        </grok>
        <grok>
            pattern %{TIMESTAMP_ISO8601:timestamp}:%{LOGLEVEL:loglevel}:%{DATA:logger}:%{GREEDYDATA:event}
        </grok>
        <grok>
            pattern %{GREEDYDATA:message}
        </grok>
        time_key timestamp2
      </parse>
    </filter>
    <match applogs>
      @type rewrite_tag_filter
      <rule>
        key event
        pattern /^DATA_ACCESS_LOGS$/
        tag data_access
      </rule>
      <rule>
        key event
        pattern /^((?!DATA_ACCESS_LOGS).)*$/
        tag services
      </rule>
      <rule>
        key message
        pattern /.*/
        tag services
      </rule>
    </match>

    <match data_access>
      @type elasticsearch
      hosts elasticsearch-client.default.svc:9200
      logstash_format true
      logstash_prefix fd-data-access
      type_name log
    </match>

    <match services>
      @type elasticsearch
      hosts elasticsearch-client.default.svc:9200
      logstash_format true
      logstash_prefix fd-services
      type_name log
    </match>

extraVolumes: []
#   - name: es-certs
#     secret:
#       defaultMode: 420
#       secretName: es-certs

extraVolumeMounts: []
#   - name: es-certs
#     mountPath: /certs
#     readOnly: true
